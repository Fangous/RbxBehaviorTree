[{"title":"Intro","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/docs/intro","content":"Intro A simple behavior tree implementation for Roblox.","keywords":""},{"title":"Plugin","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/docs/plugin","content":"Plugin Our plugin to visualize behavior trees is currently in development.","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/docs/install","content":"Installation You can find our wally package here or add this line to your wally.toml file: rbxbehaviortree = &quot;fangous/rbxbehaviortree@0.1.2&quot; ","keywords":""},{"title":"RbxBehaviorTree","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/api/RbxBehaviorTree","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#types","content":" "},{"title":"Node​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#Node","content":"&lt;/&gt; interface Node { Type: NodeType TickNode: (subTree: NodeTree) → NodeResult SubTree: NodeTree } A single node in a behavior tree.  "},{"title":"NodeTree​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#NodeTree","content":"&lt;/&gt; type NodeTree = {Node} An array of Node elements representing a tree structure.  "},{"title":"NodeType​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#NodeType","content":"&lt;/&gt; type NodeType = &quot;FALLBACK&quot; | &quot;SEQUENCE&quot; | &quot;ACTION&quot; Enumeration of node types that define behavior when ticked.  "},{"title":"NodeResult​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#NodeResult","content":"&lt;/&gt; type NodeResult = &quot;SUCCESS&quot; | &quot;FAILURE&quot; | &quot;RUNNING&quot; Enumeration of possible results for a node after execution. "},{"title":"Functions​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#functions","content":" "},{"title":"New​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#New","content":"&lt;/&gt; RbxBehaviorTree.New( tickFrequency: number,-- Frequency at which the behavior tree is updated (in seconds). rootNode: Node-- The root node of the behavior tree. ) → function-- Returns a function to destroy the behavior tree. Creates a new behavior tree with a given tick frequency and root node. The behavior tree will automatically update at the given frequency until it is destroyed. This function returns a function that can be called to destroy the behavior tree.  "},{"title":"FallbackNode​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#FallbackNode","content":"&lt;/&gt; RbxBehaviorTree.FallbackNode( nodeTree: NodeTree-- Array of child nodes for the Fallback node. ) → Node-- Returns a new Fallback node. Primitive for creating a FallbackNode. Think of this as your typical &quot;OR&quot; gate in programming. The first child node to return SUCCESS will cause the FallbackNode to return SUCCESS.  "},{"title":"SequenceNode​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#SequenceNode","content":"&lt;/&gt; RbxBehaviorTree.SequenceNode( nodeTree: NodeTree-- Array of child nodes for the Sequence node. ) → Node-- Returns a new Sequence node. Primitive for creating a SequenceNode. Think of this as your typical &quot;AND&quot; gate in programming. All child nodes must return SUCCESS for the SequenceNode to return SUCCESS.  "},{"title":"ActionNode​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#ActionNode","content":"&lt;/&gt; RbxBehaviorTree.ActionNode( action: NodeAction-- A function that defines the action and returns a NodeResult. ) → Node-- Returns a new Action node. "},{"title":"Types","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree##","content":""},{"title":"​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#NodeAction","content":"type NodeAction = () → NodeResult  Primitive for creating an custom action to be used within a NodeTree. An ActionNode should never be a behavior tree's root node, as then there would be no &quot;tree&quot; to traverse. "},{"title":"Example","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/docs/example","content":"Example Here is an example TestTree.luau module: --!strict local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RbxBehaviorTree = require(ReplicatedStorage.Packages.RbxBehaviorTree) local FallbackNode = RbxBehaviorTree.FallbackNode local SequenceNode = RbxBehaviorTree.SequenceNode local ActionNode = RbxBehaviorTree.ActionNode return function(object: any) object:SetAttribute(&quot;Number&quot;, 0) local nodeTree = SequenceNode { FallbackNode { ActionNode(function() print(&quot;First action succeeded!&quot;) return &quot;SUCCESS&quot; end), ActionNode(function() warn(&quot;We will never get here!&quot;) return &quot;FAILURE&quot; end), }, SequenceNode { FallbackNode { ActionNode(function() print(&quot;Second action succeeded!&quot;) return &quot;SUCCESS&quot; end), ActionNode(function() warn(&quot;We will never get here!&quot;) return &quot;FAILURE&quot; end), }, ActionNode(function() local currentNumber = object:GetAttribute(&quot;Number&quot;) if currentNumber &gt;= 5 then print(&quot;Third action succeeded!&quot;) return &quot;SUCCESS&quot; else print(&quot;Incrementing number...&quot;) object:SetAttribute(&quot;Number&quot;, currentNumber + 1) return &quot;RUNNING&quot; end end), ActionNode(function() warn(&quot;Fourth action succeeded!&quot;) return &quot;SUCCESS&quot; end), }, } return RbxBehaviorTree.New(1, nodeTree) end You can now create a new TestTree behavior tree and clean it up after 10 seconds with the following code: local TestTree = require(path.to.TestTree) local newTestTree = TestTree(workspace.Baseplate) task.wait(10) newTestTree() ","keywords":""}]