"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[402],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),f=r,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return t?a.createElement(m,l(l({ref:n},u),{},{components:t})):a.createElement(m,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=f;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5555:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={title:"Example",sidebar_position:4},l="Example",i={unversionedId:"example",id:"example",title:"Example",description:"Here is an example `TestTree.luau` module:",source:"@site/docs/example.md",sourceDirName:".",slug:"/example",permalink:"/RbxBehaviorTree/docs/example",draft:!1,editUrl:"https://github.com/Fangous/RbxBehaviorTree/edit/main/docs/example.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Example",sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Plugin",permalink:"/RbxBehaviorTree/docs/plugin"}},s={},c=[],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"example"},"Example"),(0,r.kt)("p",null,"Here is an example ",(0,r.kt)("inlineCode",{parentName:"p"},"TestTree.luau")," module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'--!strict\nlocal RbxBehaviorTree = require(path.to.RbxBehaviorTree)\n\nlocal FallbackNode = RbxBehaviorTree.FallbackNode\nlocal SequenceNode = RbxBehaviorTree.SequenceNode\nlocal ActionNode = RbxBehaviorTree.ActionNode\nlocal NodeResults = RbxBehaviorTree.NodeResults\n\nreturn function(object: any)\n    local fireAlarmOn = false\n    local distanceFromBuilding = 0\n    local safeDistance = 5\n    local hasApple = false\n    local hasSandwich = true\n    local hasBanana = true\n    local isBananaOpen = false\n\n    local nodeTree = SequenceNode("Root", {\n        FallbackNode("CheckForFireAlarm", {\n            ActionNode("FireAlarmOff", function()\n                if not fireAlarmOn then\n                    print("No fire alarm")\n                    return NodeResults.SUCCESS\n                else\n                    print("Fire alarm is on!")\n                    return NodeResults.FAILURE\n                end\n            end),\n            ActionNode("RunAway", function()\n                if distanceFromBuilding < safeDistance then\n                    distanceFromBuilding += 1\n                    print("Run away!")\n                    return NodeResults.RUNNING\n                else\n                    return NodeResults.SUCCESS\n                end\n            end),\n        }),\n        FallbackNode("EatFood", {\n            ActionNode("EatApple", function()\n                if hasApple then\n                    hasApple = false\n                    print("Ate apple!")\n                    return NodeResults.SUCCESS\n                else\n                    print("We don\'t have an apple!")\n                    return NodeResults.FAILURE\n                end\n            end),\n            ActionNode("EatSandwich", function()\n                if hasSandwich then\n                    hasSandwich = false\n                    print("Ate sandwich!")\n                    return NodeResults.SUCCESS\n                else\n                    print("We don\'t have a sandwich!")\n                    return NodeResults.FAILURE\n                end\n            end),\n            SequenceNode("EatBanana", {\n                ActionNode("OpenBanana", function()\n                    if hasBanana then\n                        isBananaOpen = true\n                        print("Opened banana!")\n                        return NodeResults.SUCCESS\n                    else\n                        print("We can\'t open a non-existent banana!")\n                        return NodeResults.FAILURE\n                    end\n                end),\n                ActionNode("EatBanana", function()\n                    if hasBanana and isBananaOpen then\n                        hasBanana = false\n                        print("Ate banana!")\n                        return NodeResults.SUCCESS\n                    else\n                        print("Where is our banana?")\n                        --Currently, this will never print, since our parent SequenceNode will always fail out at "OpenBanana"\n                        return NodeResults.FAILURE\n                    end\n                end),\n            }),\n        }),\n    })\n\n    return RbxBehaviorTree.New(1, nodeTree)\nend\n')),(0,r.kt)("p",null,"You can now create a new TestTree behavior tree and clean it up after 10 seconds with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local TestTree = require(path.to.TestTree)\n\nlocal newTestTree = TestTree(workspace.Baseplate)\ntask.wait(10)\nnewTestTree.Destroy() -- Clean up newTestTree\n")))}d.isMDXComponent=!0}}]);