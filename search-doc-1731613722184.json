[{"title":"Installation","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/docs/install","content":"Installation You can find our wally package here or add this line to your wally.toml file: rbxbehaviortree = &quot;fangous/rbxbehaviortree@0.1.2&quot; ","keywords":""},{"title":"RbxBehaviorTree","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/api/RbxBehaviorTree","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#types","content":" "},{"title":"Node​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#Node","content":"&lt;/&gt; interface Node { Type: NodeType TickNode: (subTree: NodeTree) → NodeResult SubTree: NodeTree } A single node in a behavior tree.  "},{"title":"NodeTree​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#NodeTree","content":"&lt;/&gt; type NodeTree = {Node} An array of Node elements representing a tree structure.  "},{"title":"NodeType​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#NodeType","content":"&lt;/&gt; type NodeType = &quot;FALLBACK&quot; | &quot;SEQUENCE&quot; | &quot;ACTION&quot; Possible node types that define behavior when ticked.  "},{"title":"NodeResult​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#NodeResult","content":"&lt;/&gt; type NodeResult = &quot;SUCCESS&quot; | &quot;FAILURE&quot; | &quot;RUNNING&quot; Possible results for a node after execution. "},{"title":"Properties​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#properties","content":" "},{"title":"NodeResults​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#NodeResults","content":"&lt;/&gt; RbxBehaviorTree.NodeResults: {[string]: NodeResult} Enumeration of possible results for a node after execution. "},{"title":"Functions​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#functions","content":" "},{"title":"New​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#New","content":"&lt;/&gt; RbxBehaviorTree.New( tickFrequency: number,-- Frequency at which the behavior tree is updated (in seconds). rootNode: Node,-- The root node of the behavior tree. cleanup: (() → ())?-- Optional function to run after the behavior tree is destroyed. ) → function-- Returns a function to destroy the behavior tree. Creates a new behavior tree with a given tick frequency and root node. The behavior tree will automatically update at the given frequency until it is destroyed. This function returns a function that can be called to destroy the behavior tree.  "},{"title":"FallbackNode​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#FallbackNode","content":"&lt;/&gt; RbxBehaviorTree.FallbackNode( nodeName: string,-- Name of the fallback node. nodeTree: NodeTree-- Array of child nodes for the Fallback node. ) → Node-- Returns a new Fallback node. Primitive for creating a FallbackNode. Think of this as your typical &quot;OR&quot; gate in programming. The first child node to return SUCCESS will cause the FallbackNode to return SUCCESS.  "},{"title":"SequenceNode​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#SequenceNode","content":"&lt;/&gt; RbxBehaviorTree.SequenceNode( nodeName: string,-- Name of the sequence node. nodeTree: NodeTree-- Array of child nodes for the Sequence node. ) → Node-- Returns a new Sequence node. Primitive for creating a SequenceNode. Think of this as your typical &quot;AND&quot; gate in programming. All child nodes must return SUCCESS for the SequenceNode to return SUCCESS.  "},{"title":"ActionNode​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#ActionNode","content":"&lt;/&gt; RbxBehaviorTree.ActionNode( nodeName: string,-- Name of the action node. action: NodeAction-- A function that defines the action and returns a NodeResult. ) → Node-- Returns a new Action node. "},{"title":"Types","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree##","content":""},{"title":"​","type":1,"pageTitle":"RbxBehaviorTree","url":"/RbxBehaviorTree/api/RbxBehaviorTree#NodeAction","content":"type NodeAction = () → NodeResult  Primitive for creating an custom action to be used within a NodeTree. An ActionNode cannot be a behavior tree's root node, as then there would be no &quot;tree&quot; to traverse. "},{"title":"Intro","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/docs/intro","content":"Intro A simple behavior tree implementation for Roblox.","keywords":""},{"title":"Plugin","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/docs/plugin","content":"Plugin Our plugin to visualize behavior trees is currently in development.","keywords":""},{"title":"Example","type":0,"sectionRef":"#","url":"/RbxBehaviorTree/docs/example","content":"Example Here is an example TestTree.luau module: --!strict local RbxBehaviorTree = require(path.to.RbxBehaviorTree) local FallbackNode = RbxBehaviorTree.FallbackNode local SequenceNode = RbxBehaviorTree.SequenceNode local ActionNode = RbxBehaviorTree.ActionNode local NodeResults = RbxBehaviorTree.NodeResults return function(object: any) local fireAlarmOn = false local distanceFromBuilding = 0 local safeDistance = 5 local hasApple = false local hasSandwich = true local hasBanana = true local isBananaOpen = false local nodeTree = SequenceNode(&quot;Root&quot;, { FallbackNode(&quot;CheckForFireAlarm&quot;, { ActionNode(&quot;FireAlarmOff&quot;, function() if not fireAlarmOn then print(&quot;No fire alarm&quot;) return NodeResults.SUCCESS else print(&quot;Fire alarm is on!&quot;) return NodeResults.FAILURE end end), ActionNode(&quot;RunAway&quot;, function() if distanceFromBuilding &lt; safeDistance then distanceFromBuilding += 1 print(&quot;Run away!&quot;) return NodeResults.RUNNING else return NodeResults.SUCCESS end end), }), FallbackNode(&quot;EatFood&quot;, { ActionNode(&quot;EatApple&quot;, function() if hasApple then hasApple = false print(&quot;Ate apple!&quot;) return NodeResults.SUCCESS else print(&quot;We don't have an apple!&quot;) return NodeResults.FAILURE end end), ActionNode(&quot;EatSandwich&quot;, function() if hasSandwich then hasSandwich = false print(&quot;Ate sandwich!&quot;) return NodeResults.SUCCESS else print(&quot;We don't have a sandwich!&quot;) return NodeResults.FAILURE end end), SequenceNode(&quot;EatBanana&quot;, { ActionNode(&quot;OpenBanana&quot;, function() if hasBanana then isBananaOpen = true print(&quot;Opened banana!&quot;) return NodeResults.SUCCESS else print(&quot;We can't open a non-existent banana!&quot;) return NodeResults.FAILURE end end), ActionNode(&quot;EatBanana&quot;, function() if hasBanana and isBananaOpen then hasBanana = false print(&quot;Ate banana!&quot;) return NodeResults.SUCCESS else print(&quot;Where is our banana?&quot;) --Currently, this will never print, since our parent SequenceNode will always fail out at &quot;OpenBanana&quot; return NodeResults.FAILURE end end), }), }), }) return RbxBehaviorTree.New(1, nodeTree) end You can now create a new TestTree behavior tree and clean it up after 10 seconds with the following code: local TestTree = require(path.to.TestTree) local newTestTree = TestTree(workspace.Baseplate) task.wait(10) newTestTree() --destroy newTestTree ","keywords":""}]